#!/bin/bash

# Runs Prettier on .ts, .tsx, .js, .jsx, .md, .yml, .yaml, .css and .json files, and also runs ESLint and tsc on .ts,
# .tsx, .js, .jsx files. Prettier and ESLint only check the committed files, whereas tsc checks all project files, since
# it's not possible to run tsc on specific files while obeying the tsconfig.json options (see
# https://github.com/microsoft/TypeScript/issues/27379 and https://www.npmjs.com/package/tsc-files).
# This hook always commits, even if errors are found. And it does not modify the files (ie it does not do `prettier
# write`), it only checks if there is any issue and reports it.
# Inspired by https://prettier.io/docs/en/precommit.html#option-6-shell-script

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NO_COLOR='\033[0m'

# Validate that pre-commit and .git/hooks/pre-commit have the same content.
# If content is not the same, do not commit.
validate_precommit_hook() {
  if ! diff pre-commit .git/hooks/pre-commit > /dev/null; then
    printf "${RED}Error: pre-commit and .git/hooks/pre-commit have different content.${NO_COLOR}\n"
    printf "${BOLD}Commit aborted.${NO_COLOR}\n"
    printf "${YELLOW}To fix this, run: ${BOLD}cp pre-commit .git/hooks${NO_COLOR}\n"
    printf "${YELLOW}Then commit again.${NO_COLOR}\n"
    exit 1
  fi
}

validate_precommit_hook

get_staged_files() {
  ALL_FILES=$(git diff --cached --name-only --diff-filter=ACMR | sed 's| |\\ |g' | awk '/\.ts$|\.tsx$|\.js$|\.jsx$|\.md$|\.yml$|\.yaml$|\.css$|\.json$/')
  ALL_CODE_FILES=$(echo "$ALL_FILES" | awk '/\.ts$|\.tsx$|\.js$|\.jsx$/')
  CODE_FILES_SERVER=$(echo "$ALL_CODE_FILES" | awk '/server\//' | sed 's/server\///')
  CODE_FILES_WEB=$(echo "$ALL_CODE_FILES" | awk '/web\//' | sed 's/web\///')
}

print_title() {
  printf "\n\nüîç ${BLUE}%s${NO_COLOR}\n\n" "$1"
}

print_result() {
  ERROR_CODE=$?
  if [ $ERROR_CODE -eq 0 ]; then
    printf "\n‚úÖ ${GREEN}%s Success${NO_COLOR}\n\n" "$1"
  else
    printf "\n‚ùå ${RED}%s Failure${NO_COLOR}\n\n" "$1"
  fi
}

get_staged_files

# Prettier on both server and web

printf "üìÅ ${BLUE}Files${NO_COLOR}\n\n%s" "$ALL_FILES"
[ -z "$ALL_FILES" ] && exit 0

print_title "Prettier"
echo "$ALL_FILES" | xargs ./node_modules/.bin/prettier --ignore-unknown --check
print_result "Prettier"

# ESLint and tsc on server

cd server || exit 1

printf "üìÅ Files server\n\n%s" "$CODE_FILES_SERVER"

print_title "ESLint server"
echo "$CODE_FILES_SERVER" | xargs ./node_modules/.bin/eslint
print_result "ESLint server"

print_title "tsc server"
npx tsc --noEmit
print_result "tsc server"

# ESLint and tsc on web

cd ..
cd web || exit 1

printf "üìÅ Files web\n\n%s" "$CODE_FILES_WEB"
[ -z "$CODE_FILES_WEB" ] && exit 0

print_title "ESLint web"
echo "$CODE_FILES_WEB" | xargs ./node_modules/.bin/eslint
print_result "ESLint web"

print_title "tsc web"
npx tsc --noEmit
print_result "tsc web"

cd ..

exit 0
